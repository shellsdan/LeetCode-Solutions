{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition for a binary tree node.\n",
    "# class TreeNode:\n",
    "#     def __init__(self, val=0, left=None, right=None):\n",
    "#         self.val = val\n",
    "#         self.left = left\n",
    "#         self.right = right\n",
    "class Solution:\n",
    "#     def maxDepth(self, root: TreeNode) -> int:\n",
    "    def maxDepth(self, root):\n",
    "        if root is None:\n",
    "            return 0 \n",
    "        queue=[root]\n",
    "        l=r=1\n",
    "        res = 0\n",
    "        while queue:\n",
    "            node=queue.pop(0)\n",
    "            print(node.val,end=' ')\n",
    "            if node.left is not None:\n",
    "                queue.append(node.left)   \n",
    "                l+=1\n",
    "            if node.right is not None:\n",
    "                queue.append(node.right)\n",
    "                r+=1\n",
    "        if l < r:\n",
    "            res = r\n",
    "        else:\n",
    "            res = l\n",
    "        return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution:\n",
    "#     def maxDepth(self, root: TreeNode) -> int:\n",
    "    def maxDepth(self, root):\n",
    "        if root is None:\n",
    "            return 0 \n",
    "        else:\n",
    "            return 1+max(\n",
    "            self.maxDepth(root.left),\n",
    "            self.maxDepth(root.right))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
